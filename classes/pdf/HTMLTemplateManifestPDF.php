<?php

/**
 * Manifest PDF Template Class
 * File: classes/pdf/HTMLTemplateManifestPDF.php
 */

declare(strict_types=1);

if (!defined('_PS_VERSION_')) {
    exit;
}



/**
 * Class HTMLTemplateManifestPDF
 * 
 * Generates PDF for manifest documents
 */
class HTMLTemplateManifestPDF extends HTMLTemplate
{
    /** @var Manifest */
    public Manifest $manifest;

    /** @var array */
    public array $orderDetails;

    /** @var object */
    public $vendor;

    /**
     * Constructor
     * 
     * @param Manifest $manifest
     * @param Smarty $smarty_obj
     */
    public function __construct(Manifest $manifest, $smarty_obj)
    {
        $this->manifest = $manifest;
        $this->orderDetails = $manifest->getOrderDetails();
        $this->vendor = $this->getVendorInfo($manifest->id_vendor);

        $this->title = 'Manifest #' . $manifest->reference;

        parent::__construct($smarty_obj, 'L'); // Landscape orientation
    }

    /**
     * Get vendor information
     * 
     * @param int $idVendor
     * @return object
     */
    private function getVendorInfo(int $idVendor): object
    {
        $sql = 'SELECT v.*, c.firstname, c.lastname, c.email
                FROM ' . _DB_PREFIX_ . 'mv_vendor v
                LEFT JOIN ' . _DB_PREFIX_ . 'customer c ON v.id_customer = c.id_customer
                WHERE v.id_vendor = ' . (int)$idVendor;

        $result = Db::getInstance()->getRow($sql);

        return (object)($result ?: [
            'id_vendor' => $idVendor,
            'shop_name' => 'Unknown Vendor',
            'firstname' => '',
            'lastname' => '',
            'email' => ''
        ]);
    }

    /**
     * Returns the template's HTML header
     * 
     * @return string HTML
     */
    public function getHeader(): string
    {
        $this->smarty->assign([
            'header' => $this->l('Manifest Document'),
            'current_date' => date('Y-m-d H:i:s'),
            'manifest' => $this->manifest
        ]);

        return $this->smarty->fetch(_PS_MODULE_DIR_ . 'multivendor/views/templates/admin/pdf/manifest-header.tpl');
    }

    /**
     * Returns the template's HTML content
     * 
     * @return string HTML
     */
    public function getContent(): string
    {
        $shippingAddress = null;
        if ($this->manifest->shipping_address) {
            $shippingAddress = json_decode($this->manifest->shipping_address, true);
        }

        $totalQuantity = 0;
        $totalAmount = 0;
        $uniqueOrders = [];

        foreach ($this->orderDetails as $detail) {
            $totalQuantity += (int)$detail['product_quantity'];
            $totalAmount += (float)($detail['vendor_amount'] ?? 0);
            $uniqueOrders[$detail['id_order']] = true;
        }

        $this->smarty->assign([
            'manifest' => $this->manifest,
            'vendor' => $this->vendor,
            'order_details' => $this->orderDetails,
            'shipping_address' => $shippingAddress,
            'total_quantity' => $totalQuantity,
            'total_amount' => $totalAmount,
            'total_orders' => count($uniqueOrders),
            'current_date' => date('Y-m-d H:i:s'),
            'shop_name' => Configuration::get('PS_SHOP_NAME')
        ]);

        return $this->smarty->fetch(_PS_MODULE_DIR_ . 'multivendor/views/templates/admin/pdf/manifest-content.tpl');
    }

    /**
     * Returns the template's HTML footer
     * 
     * @return string HTML
     */
    public function getFooter(): string
    {
        $this->smarty->assign([
            'footer_text' => $this->l('Generated by') . ' ' . Configuration::get('PS_SHOP_NAME'),
            'generation_date' => date('Y-m-d H:i:s'),
            'manifest' => $this->manifest
        ]);

        return $this->smarty->fetch(_PS_MODULE_DIR_ . 'multivendor/views/templates/admin/pdf/manifest-footer.tpl');
    }

    /**
     * Returns the template filename
     * 
     * @return string
     */
    public function getFilename(): string
    {
        return 'Manifest_' . $this->manifest->reference . '_' . date('YmdHis') . '.pdf';
    }



    /**
     * Returns bulk filename for multiple manifests
     * 
     * @return string
     */
    public function getBulkFilename(): string
    {
        return 'Manifests_Bulk_' . date('YmdHis') . '.pdf';
    }



    /**
     * Generate PDF for multiple manifests
     * 
     * @param array $manifests
     * @param Smarty $smarty
     * @return PDF
     */
    public static function generateBulkPDF(array $manifests, $smarty): PDF
    {
        $templates = [];

        foreach ($manifests as $manifest) {
            $templates[] = new self($manifest, $smarty);
        }

        return new PDF($templates, 'ManifestBulk', Context::getContext()->smarty, 'L');
    }

    /**
     * Get template orientation
     * 
     * @return string
     */
    public function getOrientation(): string
    {
        return 'L'; // Landscape for better table layout
    }

    /**
     * Get template margins
     * 
     * @return array
     */
    public function getMargins(): array
    {
        return [
            'top' => 15,
            'right' => 10,
            'bottom' => 15,
            'left' => 10
        ];
    }

    /**
     * Custom CSS for PDF
     * 
     * @return string
     */
    public function getCustomCSS(): string
    {
        return '
        body { 
            font-family: Arial, sans-serif; 
            font-size: 10px; 
            margin: 0; 
            padding: 0;
        }
        .header-section { 
            margin-bottom: 20px; 
            border-bottom: 2px solid #007bff; 
            padding-bottom: 10px;
        }
        .info-table { 
            width: 100%; 
            border-collapse: collapse; 
            margin-bottom: 15px;
        }
        .info-table td { 
            padding: 5px; 
            border: 1px solid #ddd; 
            font-size: 9px;
        }
        .info-table .label { 
            background-color: #f8f9fa; 
            font-weight: bold; 
            width: 25%;
        }
        .items-table { 
            width: 100%; 
            border-collapse: collapse; 
            font-size: 8px;
        }
        .items-table th { 
            background-color: #007bff; 
            color: white; 
            padding: 6px; 
            text-align: left;
        }
        .items-table td { 
            padding: 4px; 
            border: 1px solid #ddd; 
            vertical-align: top;
        }
        .items-table tr:nth-child(even) { 
            background-color: #f8f9fa;
        }
        .summary-section {
            margin-top: 20px;
            page-break-inside: avoid;
        }
        .signature-section {
            margin-top: 30px;
            page-break-inside: avoid;
        }
        ';
    }
}
